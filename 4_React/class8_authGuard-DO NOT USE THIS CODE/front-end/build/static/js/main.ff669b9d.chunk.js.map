{"version":3,"sources":["context/globalContext.js","components/login/login.jsx","components/signup/signup.jsx","components/dashboard/dashboard.jsx","App.js","reportWebVitals.js","index.js"],"names":["GlobalStateContext","React","createContext","GlobalStateUpdateContext","useGlobalState","useContext","useGlobalStateUpdate","GlobalStateProvider","children","useEffect","axios","post","then","response","console","log","status","catch","error","setData","prev","login","useState","user","darkTheme","loginStatus","token","data","Provider","value","Login","globalState","setGlobalState","type","onClick","url","method","JSON","stringify","Signup","history","useHistory","push","Dashboard","App","themeStyles","backgroundColor","color","padding","navStyles","display","border","marginLeft","style","to","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff669b9d.chunk.js","sourcesContent":["\nimport React, { useContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst GlobalStateContext = React.createContext()\nconst GlobalStateUpdateContext = React.createContext()\n\nexport const useGlobalState = () => useContext(GlobalStateContext)\nexport const useGlobalStateUpdate = () => useContext(GlobalStateUpdateContext)\n\nexport function GlobalStateProvider({ children }) {\n\n    useEffect(() => {\n\n\n        axios.post('http://localhost:5000/profile')\n            .then(function (response) {\n                // handle success\n                console.log(\"response: \", response.status);\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(\"error ==============> \", error.response.status);\n               \n                if(error.response.status){\n                    setData(prev => ({ ...prev, login: false }))\n                }\n\n            })\n            .then(function () {\n                // always executed\n            });\n\n        return () => {\n            console.log(\"cleanup\")\n        }\n    }, [])\n\n\n\n\n    const [data, setData] = useState({\n        user: null,\n        darkTheme: false,\n        loginStatus: false,\n        token: null\n    })\n\n    return (\n        <GlobalStateContext.Provider value={data}>\n            <GlobalStateUpdateContext.Provider value={setData}>\n                {children}\n            </GlobalStateUpdateContext.Provider>\n        </GlobalStateContext.Provider>\n    )\n} ","import { useGlobalState, useGlobalStateUpdate } from \"./../../context/globalContext\"\nimport axios from \"axios\";\n\nfunction Login() {\n\n    const globalState = useGlobalState()\n    const setGlobalState = useGlobalStateUpdate()\n\n\n    function handleLogin() {\n        axios({\n            url: \"https://reqres.in/api/login\", // these are fake apis for testing purposes. see more: https://reqres.in/\n            method : \"POST\", \n            data: {\n                \"email\": \"eve.holt@reqres.in\",\n                \"password\": \"cityslicka\"\n            }\n        }).then(function(response){\n            console.log(\"response: \", response.data);\n\n            setGlobalState(prev=>{\n                return {...prev, loginStatus: true, token: response.data.token}\n            })\n\n        })\n    }\n\n    return (\n        <div>\n            <h1>Login:</h1>\n\n            Email: <input type=\"email\" />\n            <br />\n            Password: <input type=\"password\" />\n            <br />\n\n            <button onClick={handleLogin}>Log in</button>\n\n            {JSON.stringify(globalState)}\n        </div>\n    )\n}\nexport default Login;\n","import {\n    useHistory\n} from \"react-router-dom\";\n\nimport { useGlobalState, useGlobalStateUpdate } from \"./../../context/globalContext\"\n\nfunction Signup() {\n\n    const globalState = useGlobalState()\n    const setGlobalState = useGlobalStateUpdate()\n\n\n    var history = useHistory();\n    function handleClick() {\n        history.push(\"/\");\n    }\n\n    return (\n        <div>\n            <h1>Signup</h1>\n\n            <button onClick={() => {\n                setGlobalState(prev => ({ ...prev, darkTheme: !prev.darkTheme }))\n            }}\n\n            >toggle</button>\n\n            \n\n\n            <br /> name:  <input type=\"text\" />\n            <br /> email:  <input type=\"text\" />\n            <br /> password:  <input type=\"text\" />\n            <br /> re-password:  <input type=\"text\" />\n            <br /> <button>Submit</button>\n\n            <br /><button onClick={handleClick}> I already have an account take me back to login page</button>\n        </div>\n\n\n    )\n}\nexport default Signup;\n","\nimport { useGlobalState, useGlobalStateUpdate } from \"./../../context/globalContext\"\n\nconst Dashboard = () => {\n\n    const globalState = useGlobalState()\n    const setGlobalState = useGlobalStateUpdate()\n\n\n\n    return (<div>\n\n        <h1>Dashboard</h1>\n        <button onClick={() => {\n            setGlobalState(prev => ({ ...prev, darkTheme: !prev.darkTheme }))\n        }}\n\n        >toggle</button>\n\n        <p>this is a protexted route</p>\n\n    </div>)\n}\nexport default Dashboard;\n","import './App.css';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\nimport React, { useContext } from \"react\";\n\n\nimport Login from \"./components/login/login\"\nimport Signup from \"./components/signup/signup\"\nimport Dashboard from \"./components/dashboard/dashboard\"\n\nimport { useGlobalState, useGlobalStateUpdate } from \"./context/globalContext\"\n\nfunction App() {\n\n  const globalState = useGlobalState()\n  const setGlobalState = useGlobalStateUpdate()\n\n\n  const themeStyles = {\n    backgroundColor: globalState.darkTheme ? \"#333\" : \"#ccc\",\n    color: globalState.darkTheme ? \"#ccc\" : \"#333\",\n    padding: \"2rem\",\n  }\n  const navStyles = {\n    display: \"inline\",\n    border: globalState.darkTheme ? \"1px solid white\" : \"1px solid black\",\n    padding: \"5px\",\n    marginLeft: \"5px\"\n  }\n\n  return (\n    <div style={themeStyles}>\n\n      <Router>\n\n        <nav>\n          <ul>\n            <li style={navStyles}>  <Link to=\"/login\">login</Link>     </li>\n            <li style={navStyles}>  <Link to=\"/signup\">Signup</Link>     </li>\n            <li style={navStyles}>  <Link to=\"/dashboard\">Dashboard</Link>     </li>\n            <button style={navStyles} onClick={() => setGlobalState(prev => ({ ...prev, darkTheme: !prev.darkTheme }))} >toggle</button>\n\n            {\"===>\" + JSON.stringify(globalState)}\n\n          </ul>\n        </nav>\n\n\n\n        {/* public routes */}\n        {(globalState.loginStatus === false) ?\n          <>\n            <Route exact={true} path=\"/login\">\n              <Login />\n            </Route>\n\n            <Route path=\"/signup\">\n              <Signup />\n            </Route>\n\n            <Route path=\"*\">\n              <Redirect to=\"/login\" />\n            </Route>\n          </>\n          : null}\n\n\n        {/* private routes */}\n\n        {(globalState.loginStatus === true) ?\n\n          <Route path=\"/\">\n            <Dashboard />\n          </Route>: null\n\n\n          }\n\n\n\n\n\n\n\n      </Router >\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { GlobalStateProvider } from \"./context/globalContext\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStateProvider>\n      <App />\n    </GlobalStateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}